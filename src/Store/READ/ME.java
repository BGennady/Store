package Store.READ;

public @interface ME {

//    Аннотация к задаче "Магазин"
//
//    Программа представляет собой магазин одежды, где пользователи оформить заказ.
//
//    Основной функционал:
//    - Показать доступные товары в магазине.
//    - Показать содержимое корзины.
//    - Оформить заказ и увидеть общую стоимость.
//    - Выйти из программы.
//    - Выбор действий происходит через ввод номера действия, что обеспечивает простое и интуитивное взаимодействие.
//
//    Программа спроектирована с использованием принципов SOLID:
//
//    Применение принципов SOLID:
//
//    1. Принцип единственной ответственности (Single Responsibility Principle, SRP):
//    Каждый класс отвечает за выполнение одной задачи.
//
//      пример:
//    класс Inventory отвечает за хранение и отображение списка доступной одежды.;
//    класс Cart – за управление корзиной покупок;
//    *Это позволяет легко модифицировать или тестировать функционал классов.
//
//    2. Принцип открытости/закрытости (Open/Closed Principle, OCP):
//    Программа легко расширяется без необходимости модификации существующего кода.
//
//      пример:
//    классы Jacket, Jeans, TShirt, и прочие наследуются от базового класса Clothing,
//    позволяя добавлять новые типы одежды без изменения логики.
//
//    3. Принцип подстановки Барбары Лисков (Liskov Substitution Principle, LSP):
//    Подклассы могут использоваться вместо базовых классов без изменения корректности программы.
//
//      пример:
//    объекты классов Jacket, Jeans и прочие могут заменять объекты базового класса Clothing.
//    в методе replenishmentOfAssortment() объекты всех типов одежды добавляются в инвентарь как объекты класса Clothing, что не нарушает логику программы.
//
//    4. Принцип разделения интерфейса (Interface Segregation Principle, ISP):
//    Интерфейсы разделены на небольшие и специфические, что позволяет каждому классу реализовать только нужные ему
//    методы.
//
//      пример:
//    Интерфейс UserInterface реализован в классе Main и используется только для пользовательского интерфейса.
//
//    5. Принцип инверсии зависимостей (Dependency Inversion Principle, DIP):
//    Программа использует интерфейс вместо зависимости от конкретной реализации.
//
//      пример:
//    Класс Order работает с корзиной, используя для этого интерфейс iCart,
//    что позволяет, при необходимости, легко заменить реализацию корзины.
//
//    Консольное взаимодействие
//    При запуске программы пользователь может выбрать одно из предложенных действий.
//
//    вывод:
//    Программа демонстрирует использование принципов SOLID и правил чистого кода.
//    Она легко расширяется, что позволяет добавлять новые функции и классы без изменения существующего кода.
}
